diff --git a/src/main/java/net/jcm/vsch/blocks/VSCHBlocks.java b/src/main/java/net/jcm/vsch/blocks/VSCHBlocks.java
index f4c909a..f9fdd53 100644
--- a/src/main/java/net/jcm/vsch/blocks/VSCHBlocks.java
+++ b/src/main/java/net/jcm/vsch/blocks/VSCHBlocks.java
@@ -52,6 +52,11 @@ public class VSCHBlocks {
 					.strength(5f)
 					.noOcclusion()));
 
+	public static final RegistryObject<Block> TURBO_PUMP_BLOCK = registerBlock("turbo_pump_block",
+			() -> new GravityInducerBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK).sound(SoundType.COPPER)
+					.strength(5f)
+					.noOcclusion()));
+
 	/*public static final RegistryObject<Block> MAGNET_BLOCK = registerBlock("magnet_block",
 			() -> new MagnetBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BLOCK).sound(SoundType.COPPER)
 					.strength(5f)
diff --git a/src/main/java/net/jcm/vsch/blocks/custom/TurboPumpBlock.java b/src/main/java/net/jcm/vsch/blocks/custom/TurboPumpBlock.java
index 0e328e8..26af55c 100644
--- a/src/main/java/net/jcm/vsch/blocks/custom/TurboPumpBlock.java
+++ b/src/main/java/net/jcm/vsch/blocks/custom/TurboPumpBlock.java
@@ -1,4 +1,29 @@
 package net.jcm.vsch.blocks.custom;
 
-public class TurboPumpBlock {
+import net.jcm.vsch.blocks.entity.DockerBlockEntity;
+import net.jcm.vsch.blocks.entity.TurboPumpBlockEntity;
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.EntityBlock;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.BlockEntityTicker;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import net.minecraft.world.level.block.state.BlockState;
+import org.jetbrains.annotations.Nullable;
+
+public class TurboPumpBlock extends Block implements EntityBlock {
+    public TurboPumpBlock(Properties properties) {
+        super(properties);
+    }
+
+    @Override
+    public @Nullable BlockEntity newBlockEntity(BlockPos blockPos, BlockState blockState) {
+        return new TurboPumpBlockEntity(blockPos, blockState);
+    }
+
+    @Override
+    public @Nullable <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState state, BlockEntityType<T> type) {
+        return level.isClientSide() ? (TurboPumpBlockEntity::clientTick) : TurboPumpBlockEntity::serverTick;
+    }
 }
diff --git a/src/main/java/net/jcm/vsch/blocks/entity/AirThrusterBlockEntity.java b/src/main/java/net/jcm/vsch/blocks/entity/AirThrusterBlockEntity.java
index e125767..3211f11 100644
--- a/src/main/java/net/jcm/vsch/blocks/entity/AirThrusterBlockEntity.java
+++ b/src/main/java/net/jcm/vsch/blocks/entity/AirThrusterBlockEntity.java
@@ -1,6 +1,8 @@
 package net.jcm.vsch.blocks.entity;
 
 import net.jcm.vsch.blocks.entity.template.AbstractThrusterBlockEntity;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.Level;
 import org.joml.Vector3d;
 
 import net.jcm.vsch.config.VSCHConfig;
@@ -46,4 +48,14 @@ public class AirThrusterBlockEntity extends AbstractThrusterBlockEntity {
 					);
 		}
 	}
+
+	@Override
+	public void tickForce(ServerLevel level, BlockPos pos, BlockState state) {
+		super.tickForceA(level,pos,state);
+	}
+
+	@Override
+	public void tickParticles(Level level, BlockPos pos, BlockState state) {
+		super.tickParticlesA(level,pos,state);
+	}
 }
diff --git a/src/main/java/net/jcm/vsch/blocks/entity/PowerfulThrusterBlockEntity.java b/src/main/java/net/jcm/vsch/blocks/entity/PowerfulThrusterBlockEntity.java
index 993c021..11415db 100644
--- a/src/main/java/net/jcm/vsch/blocks/entity/PowerfulThrusterBlockEntity.java
+++ b/src/main/java/net/jcm/vsch/blocks/entity/PowerfulThrusterBlockEntity.java
@@ -6,6 +6,8 @@ import net.jcm.vsch.config.VSCHConfig;
 import net.lointain.cosmos.init.CosmosModParticleTypes;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class PowerfulThrusterBlockEntity extends AbstractThrusterBlockEntity {
@@ -23,4 +25,14 @@ public class PowerfulThrusterBlockEntity extends AbstractThrusterBlockEntity {
 	protected ParticleOptions getThrusterParticleType() {
 		return CosmosModParticleTypes.BLUETHRUSTED.get();
 	}
+
+	@Override
+	public void tickForce(ServerLevel level, BlockPos pos, BlockState state) {
+		super.tickForceA(level,pos,state);
+	}
+
+	@Override
+	public void tickParticles(Level level, BlockPos pos, BlockState state) {
+		super.tickParticlesA(level,pos,state);
+	}
 }
diff --git a/src/main/java/net/jcm/vsch/blocks/entity/ThrusterBlockEntity.java b/src/main/java/net/jcm/vsch/blocks/entity/ThrusterBlockEntity.java
index a046be2..8f3d515 100644
--- a/src/main/java/net/jcm/vsch/blocks/entity/ThrusterBlockEntity.java
+++ b/src/main/java/net/jcm/vsch/blocks/entity/ThrusterBlockEntity.java
@@ -1,19 +1,97 @@
 package net.jcm.vsch.blocks.entity;
 
+import net.jcm.vsch.blocks.custom.template.AbstractThrusterBlock;
 import net.jcm.vsch.blocks.entity.template.AbstractThrusterBlockEntity;
 import net.jcm.vsch.config.VSCHConfig;
 
+import net.jcm.vsch.ship.VSCHForceInducedShips;
+import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraftforge.common.capabilities.Capability;
+import net.minecraftforge.common.capabilities.ForgeCapabilities;
+import net.minecraftforge.common.util.LazyOptional;
+import net.minecraftforge.fluids.capability.templates.FluidTank;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraftforge.fluids.FluidStack;
+import net.minecraftforge.fluids.capability.IFluidHandler;
+import org.jetbrains.annotations.NotNull;
 
-public class ThrusterBlockEntity extends AbstractThrusterBlockEntity {
+public class ThrusterBlockEntity extends AbstractThrusterBlockEntity implements IFluidHandler {
+
+	private final FluidTank tank = new FluidTank(1000, fluid -> fluid.getFluid().isSame(Fluids.WATER));
+	private final LazyOptional<IFluidHandler> fluidHandler = LazyOptional.of(() -> this);
 
 	public ThrusterBlockEntity(BlockPos pos, BlockState state) {
 		super("thruster", VSCHBlockEntities.THRUSTER_BLOCK_ENTITY.get(), pos, state);
 	}
 
+
 	@Override
 	public float getMaxThrottle() {
 		return VSCHConfig.THRUSTER_STRENGTH.get().intValue();
 	}
+	@Override
+	public <T> LazyOptional<T> getCapability(Capability<T> cap, Direction side) {
+		if (cap == ForgeCapabilities.FLUID_HANDLER) {
+			return fluidHandler.cast();
+		}
+		return super.getCapability(cap, side);
+	}
+
+	@Override
+	public int getTanks() {
+		return 1;
+	}
+
+	@Override
+	public @NotNull FluidStack getFluidInTank(int i) {
+		return this.tank.getFluid();
+	}
+
+	@Override
+	public int getTankCapacity(int i) {
+		return this.tank.getCapacity();
+	}
+
+	@Override
+	public boolean isFluidValid(int i, @NotNull FluidStack fluidStack) {
+		return this.tank.isFluidValid(fluidStack);
+	}
+
+	@Override
+	public int fill(FluidStack fluidStack, FluidAction fluidAction) {
+		return this.tank.fill(fluidStack, fluidAction);
+	}
+
+	@Override
+	public @NotNull FluidStack drain(FluidStack fluidStack, FluidAction fluidAction) {
+		return this.tank.drain(fluidStack, fluidAction);
+	}
+
+	@Override
+	public @NotNull FluidStack drain(int i, FluidAction fluidAction) {
+		return this.tank.drain(i, fluidAction);
+	}
+
+	@Override
+	public void tickForce(ServerLevel level, BlockPos pos, BlockState state) {
+		if (canTick(this.tank.getFluidAmount(), super.getPower())){
+			super.tickForceA(level,pos,state);
+		}
+	}
+
+	@Override
+	public void tickParticles(Level level, BlockPos pos, BlockState state) {
+		if (canTick(this.tank.getFluidAmount(), super.getPower())){
+			super.tickParticlesA(level,pos,state);
+		}
+	}
+
+	private boolean canTick(float tank, float power){
+		int consumeFuel = (int)(super.getPower() *15);
+		return consumeFuel < tank;
+	}
 }
diff --git a/src/main/java/net/jcm/vsch/blocks/entity/TurboPumpBlockEntity.java b/src/main/java/net/jcm/vsch/blocks/entity/TurboPumpBlockEntity.java
index 0254ed1..9dabe42 100644
--- a/src/main/java/net/jcm/vsch/blocks/entity/TurboPumpBlockEntity.java
+++ b/src/main/java/net/jcm/vsch/blocks/entity/TurboPumpBlockEntity.java
@@ -1,4 +1,6 @@
 package net.jcm.vsch.blocks.entity;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraftforge.common.capabilities.Capability;
 import net.minecraftforge.common.capabilities.ForgeCapabilities;
 import net.minecraftforge.common.util.LazyOptional;
@@ -7,19 +9,18 @@ import net.minecraftforge.fluids.capability.IFluidHandler;
 import net.minecraftforge.fluids.capability.templates.FluidTank;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Fluids;
 
-public class TurbopumpBlockEntity {
+public class TurboPumpBlockEntity extends BlockEntity implements IFluidHandler{
 
     private final FluidTank waterTank = new FluidTank(1000, fluid -> fluid.getFluid().isSame(Fluids.WATER));
     private final FluidTank lavaTank = new FluidTank(1000, fluid -> fluid.getFluid().isSame(Fluids.LAVA));
 
     private final LazyOptional<IFluidHandler> fluidHandler = LazyOptional.of(() -> this);
 
-    public TurbopumpBlockEntity(BlockPos pos, BlockState state) {
-        super(MOD.FLUID_STORAGE_BLOCK_ENTITY.get(), pos, state);
+    public TurboPumpBlockEntity(BlockPos pos, BlockState blockState) {
+        super(VSCHBlockEntities.TURBO_PUMP_BLOCK_ENTITY.get(), pos, blockState);
     }
 
     @Override
@@ -81,4 +82,10 @@ public class TurbopumpBlockEntity {
         }
         return FluidStack.EMPTY;
     }
+
+    public static <T extends BlockEntity> void clientTick(Level level, BlockPos blockPos, BlockState blockState, T t) {
+    }
+
+    public static <T extends BlockEntity> void serverTick(Level level, BlockPos blockPos, BlockState blockState, T t) {
+    }
 }
diff --git a/src/main/java/net/jcm/vsch/blocks/entity/VSCHBlockEntities.java b/src/main/java/net/jcm/vsch/blocks/entity/VSCHBlockEntities.java
index b090fb3..14e41ef 100644
--- a/src/main/java/net/jcm/vsch/blocks/entity/VSCHBlockEntities.java
+++ b/src/main/java/net/jcm/vsch/blocks/entity/VSCHBlockEntities.java
@@ -42,6 +42,11 @@ public class VSCHBlockEntities {
 					() -> BlockEntityType.Builder.of(DockerBlockEntity::new, VSCHBlocks.DOCKER_BLOCK.get())
 							.build(null));
 
+	public static final RegistryObject<BlockEntityType<TurboPumpBlockEntity>> TURBO_PUMP_BLOCK_ENTITY =
+			BLOCK_ENTITIES.register("turbo_pump_block",
+					() -> BlockEntityType.Builder.of(TurboPumpBlockEntity::new, VSCHBlocks.TURBO_PUMP_BLOCK.get())
+							.build(null));
+
 
 
 	public static void register(IEventBus eventBus) {
diff --git a/src/main/java/net/jcm/vsch/blocks/entity/template/AbstractThrusterBlockEntity.java b/src/main/java/net/jcm/vsch/blocks/entity/template/AbstractThrusterBlockEntity.java
index 2b331b9..7009612 100644
--- a/src/main/java/net/jcm/vsch/blocks/entity/template/AbstractThrusterBlockEntity.java
+++ b/src/main/java/net/jcm/vsch/blocks/entity/template/AbstractThrusterBlockEntity.java
@@ -156,8 +156,7 @@ public abstract class AbstractThrusterBlockEntity extends BlockEntity implements
 		}
 	}
 
-	@Override
-	public void tickForce(ServerLevel level, BlockPos pos, BlockState state) {
+	public void tickForceA(ServerLevel level, BlockPos pos, BlockState state) {
 		// If we have changed peripheral mode, and we aren't peripheral mode
 		if (this.wasPeripheralMode != this.isPeripheralMode && !this.isPeripheralMode) {
 			this.updatePowerByRedstone();
@@ -198,8 +197,8 @@ public abstract class AbstractThrusterBlockEntity extends BlockEntity implements
 		return CosmosModParticleTypes.THRUST_SMOKE.get();
 	}
 
-	@Override
-	public void tickParticles(Level level, BlockPos pos, BlockState state) {
+
+	public void tickParticlesA(Level level, BlockPos pos, BlockState state) {
 		Ship ship = VSGameUtilsKt.getShipManagingPos(level, pos);
 		// If we aren't on a ship, then we skip
 		if (ship == null) {
